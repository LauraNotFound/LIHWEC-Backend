#!/usr/bin/env python
"""
Script para crear datos de prueba para el panel administrativo de LIHWEC
Ejecutar desde el directorio del proyecto Django
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lihwec_backend.settings')
django.setup()

from events.models import Category, Organization, Event

def create_sample_data():
    print("üöÄ Creando datos de prueba para el panel administrativo...")
    
    # Crear categor√≠as
    categories_data = [
        {"name": "tecnologia", "display_name": "Tecnolog√≠a"},
        {"name": "educacion", "display_name": "Educaci√≥n"},
        {"name": "salud", "display_name": "Salud"},
        {"name": "arte", "display_name": "Arte y Cultura"},
        {"name": "deporte", "display_name": "Deportes"},
        {"name": "ciencia", "display_name": "Ciencia"},
    ]
    
    print("üìÇ Creando categor√≠as...")
    for cat_data in categories_data:
        category, created = Category.objects.get_or_create(
            name=cat_data["name"],
            defaults={"display_name": cat_data["display_name"]}
        )
        if created:
            print(f"   ‚úÖ Categor√≠a creada: {category.display_name}")
        else:
            print(f"   ‚ÑπÔ∏è  Categor√≠a existente: {category.display_name}")
    
    # Crear organizaciones
    organizations_data = [
        {"name": "Universidad Nacional", "description": "Instituci√≥n educativa de alta calidad"},
        {"name": "TechHub Colombia", "description": "Comunidad de tecnolog√≠a e innovaci√≥n"},
        {"name": "Ministerio de Salud", "description": "Entidad gubernamental de salud p√∫blica"},
        {"name": "Centro Cultural Metropolitan", "description": "Espacio para eventos culturales y art√≠sticos"},
        {"name": "Liga Deportiva Regional", "description": "Organizaci√≥n deportiva regional"},
        {"name": "Instituto de Investigaci√≥n", "description": "Centro de investigaci√≥n cient√≠fica"},
    ]
    
    print("üè¢ Creando organizaciones...")
    for org_data in organizations_data:
        organization, created = Organization.objects.get_or_create(
            name=org_data["name"],
            defaults={"description": org_data["description"]}
        )
        if created:
            print(f"   ‚úÖ Organizaci√≥n creada: {organization.name}")
        else:
            print(f"   ‚ÑπÔ∏è  Organizaci√≥n existente: {organization.name}")
    
    # Crear eventos de ejemplo
    events_data = [
        {
            "name": "Conferencia de Inteligencia Artificial 2025",
            "date": datetime.now().date() + timedelta(days=15),
            "time": "09:00",
            "modality": "hibrido",
            "location": "Auditorio Principal - Universidad Nacional",
            "organization": "Universidad Nacional",
            "category": "tecnologia",
            "type": "conferencia",
            "image": "https://images.unsplash.com/photo-1485827404703-89b55fcc595e",
            "description": "Una conferencia sobre los √∫ltimos avances en inteligencia artificial y machine learning, dirigida a profesionales y estudiantes del √°rea.",
            "link": "https://ejemplo.com/conferencia-ia"
        },
        {
            "name": "Workshop de Desarrollo Web Full Stack",
            "date": datetime.now().date() + timedelta(days=7),
            "time": "14:00",
            "modality": "presencial",
            "location": "Centro de Innovaci√≥n TechHub",
            "organization": "TechHub Colombia",
            "category": "tecnologia",
            "type": "workshop",
            "image": "https://images.unsplash.com/photo-1555066931-4365d14bab8c",
            "description": "Aprende a desarrollar aplicaciones web completas usando tecnolog√≠as modernas como React, Node.js y MongoDB.",
            "link": "https://ejemplo.com/workshop-fullstack"
        },
        {
            "name": "Simposio de Salud P√∫blica",
            "date": datetime.now().date() + timedelta(days=22),
            "time": "08:30",
            "modality": "virtual",
            "location": "Plataforma Zoom",
            "organization": "Ministerio de Salud",
            "category": "salud",
            "type": "simposio",
            "image": "https://images.unsplash.com/photo-1584515933487-779824d29309",
            "description": "Simposio sobre pol√≠ticas de salud p√∫blica y prevenci√≥n de enfermedades, dirigido a profesionales de la salud.",
            "link": "https://ejemplo.com/simposio-salud"
        },
        {
            "name": "Festival de Arte Contempor√°neo",
            "date": datetime.now().date() + timedelta(days=30),
            "time": "18:00",
            "modality": "presencial",
            "location": "Centro Cultural Metropolitan",
            "organization": "Centro Cultural Metropolitan",
            "category": "arte",
            "type": "festival",
            "image": "https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0",
            "description": "Festival que re√∫ne artistas contempor√°neos de toda la regi√≥n, con exposiciones, performances y talleres.",
            "link": "https://ejemplo.com/festival-arte"
        },
        {
            "name": "Marat√≥n Ben√©fica 2025",
            "date": datetime.now().date() + timedelta(days=45),
            "time": "06:00",
            "modality": "presencial",
            "location": "Parque Central de la Ciudad",
            "organization": "Liga Deportiva Regional",
            "category": "deporte",
            "type": "competencia",
            "image": "https://images.unsplash.com/photo-1544717297-fa95b6ee9643",
            "description": "Marat√≥n ben√©fica para recaudar fondos para organizaciones sin fines de lucro. Incluye categor√≠as de 5K, 10K y 21K.",
            "link": "https://ejemplo.com/maraton-benefica"
        },
        {
            "name": "Congreso de Investigaci√≥n Cient√≠fica",
            "date": datetime.now().date() + timedelta(days=60),
            "time": "09:00",
            "modality": "hibrido",
            "location": "Instituto de Investigaci√≥n",
            "organization": "Instituto de Investigaci√≥n",
            "category": "ciencia",
            "type": "congreso",
            "image": "https://images.unsplash.com/photo-1532094349884-543bc11b234d",
            "description": "Congreso que presenta los √∫ltimos hallazgos en investigaci√≥n cient√≠fica de diversas disciplinas.",
            "link": "https://ejemplo.com/congreso-ciencia"
        }
    ]
    
    print("üìÖ Creando eventos...")
    for event_data in events_data:
        try:
            organization = Organization.objects.get(name=event_data["organization"])
            category = Category.objects.get(name=event_data["category"])
            
            event, created = Event.objects.get_or_create(
                name=event_data["name"],
                defaults={
                    "date": event_data["date"],
                    "time": event_data["time"],
                    "modality": event_data["modality"],
                    "location": event_data["location"],
                    "organization": organization,
                    "category": category,
                    "type": event_data["type"],
                    "image": event_data["image"],
                    "description": event_data["description"],
                    "link": event_data["link"]
                }
            )
            
            if created:
                print(f"   ‚úÖ Evento creado: {event.name}")
            else:
                print(f"   ‚ÑπÔ∏è  Evento existente: {event.name}")
                
        except (Organization.DoesNotExist, Category.DoesNotExist) as e:
            print(f"   ‚ùå Error creando evento {event_data['name']}: {e}")
    
    print("\nüéâ ¬°Datos de prueba creados exitosamente!")
    print("\nüìä Resumen:")
    print(f"   üìÇ Categor√≠as: {Category.objects.count()}")
    print(f"   üè¢ Organizaciones: {Organization.objects.count()}")
    print(f"   üìÖ Eventos: {Event.objects.count()}")
    print("\nüöÄ Ahora puedes probar el panel administrativo en:")
    print("   http://127.0.0.1:8000/api/admin-panel/")

if __name__ == "__main__":
    create_sample_data()
